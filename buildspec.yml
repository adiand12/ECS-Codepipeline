version: 0.2
phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - echo "Starting pre-build phase"
  
  build:
    commands:
      - echo "Building Docker image..."
      - docker build -t $ECR_REPO_NAME .
      - echo "Tagging Docker image..."
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}  # Generate image tag from commit hash or default to 'latest'
      - docker tag $ECR_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
      - docker tag $ECR_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG
  
  post_build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG
  
      # Dynamically retrieve the task definition ARN
      - echo "Retrieving Task Definition ARN..."
      - TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query 'taskDefinition.taskDefinitionArn' --output text)
      - echo "Task Definition ARN $TASK_DEFINITION_ARN"
  
      # Generate appspec.yaml dynamically with correct substitutions
      - echo "Generating appspec.yaml file dynamically..."
      - |
        echo "version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: ${TASK_DEFINITION_ARN}
                LoadBalancerInfo:
                  ContainerName: '${CONTAINER_NAME}'
                  ContainerPort: ${SERVICE_PORT}
                PlatformVersion: \"LATEST\"" > appspec.yaml
  
      # Generate image definitions for CodeDeploy
      - echo "Generating image definitions..."
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
  
      # Replace placeholders in taskdef.json dynamically
      - echo "Replacing placeholders in taskdef.json..."
      - sed -i "s|<TASK_DEFINITION_FAMILY>|$TASK_DEFINITION_FAMILY|g" taskdef.json
      - sed -i "s|<CONTAINER_NAME>|$CONTAINER_NAME|g" taskdef.json
      - sed -i "s|<SERVICE_PORT>|$SERVICE_PORT|g" taskdef.json
      - sed -i "s|<ECS_ROLE>|$ECS_ROLE|g" taskdef.json
      - sed -i "s|<ECS_TASK_ROLE>|$ECS_TASK_ROLE|g" taskdef.json
  
      # Replacing <IMAGE_NAME> in taskdef.json
      - sed -i "s|<IMAGE_NAME>|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG|g" taskdef.json
      - sed -i "s|<AWS_ACCOUNT_ID>|$AWS_ACCOUNT_ID|g" taskdef.json
      - sed -i "s|<AWS_REGION>|$AWS_REGION|g" taskdef.json
      - sed -i "s|<CPU_UNITS>|$CPU_UNITS|g" taskdef.json
      - sed -i "s|<MEMORY_UNITS>|$MEMORY_UNITS|g" taskdef.json


artifacts:
  files:
    - taskdef.json
    - appspec.yaml
    - imagedefinitions.json
